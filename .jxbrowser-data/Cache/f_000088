<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Creating a CC13xx based ultra low power Wireless Sensor Network</title>
</head>

<!-- START PRE -->
<link rel="stylesheet" href="../../web_support/strapdown/v/0.2/fonts/ubuntu-regular-woff.css"/>
<link rel="stylesheet" href="../../web_support/strapdown/v/0.2/fonts/glyphicons-halflings-regular.css"/>
<link rel="stylesheet" href="../../web_support/strapdown/v/0.2/themes/united2.min.css"/>
<link rel="stylesheet" href="../../web_support/strapdown/v/0.2/themes/bootstrap-responsive.min.css"/>
<link rel="stylesheet" href="../../web_support/strapdown/v/0.2/strapdown.css"/>
<!-- END PRE -->

<xmp style="display:none;" class="col-xs-6">

Introduction
==================================

This training will walk you through setting up the Wireless Sensor Network (WSN) example. When you have completed the training you will have a WSN consisting of a concentrator displaying data received from one or more sensor nodes.
The nodes will be truly ultra low power and only wake up to send data if the measured ADC value (capacitive coupling on certain pins) changes by a certain threshold.

This tutorial will take about 1 hour to complete and requires little knowledge except some basic familiarity with embedded programming.

This tutorial does not include any (or little) programming, it is simply a step by step instruction on how to get one of the provided TI-RTOS SimpleLink getting started examples running in Code Composer Studio.

For any questions you might have, please have a look at the E2E forum:
* [Sub-1 GHz E2E Forum (Public)](http://e2e.ti.com/support/wireless_connectivity)

WSN Concentrator
----------------
The WSN Concentrator example illustrates how to create a simple WSN Concentrator device which listens for packets from other nodes. This
example is meant to be used together with the WSN Node example to form a one-to-many network where the nodes send messages to the concentrator.

WSN Node
--------
The WSN Node example illustrates how to create a WSN Node device which sends packets to a concentrator. This example is
meant to be used together with the WSN concentrator example to form a many-to-one network where the nodes send messages to the concentrator.

Both the WSN concentrator and node example showcases the use of several Tasks, Semaphores and Events to get sensor updates and send packets with acknowledgement from the concentrator.
For the radio layer, the examples use the EasyLink API which provides an easy-to-use API for the most frequently used radio operations.


Prerequisites
==================================

[[b Allocated Frequency
    If you are a part of a group training, please ask the instructor for a unique frequency to use for the duration of the training.

    For simplicity, it is possible to use a base frequency (868.0, 915.0), allocate a number to everyone and then just multiply this with 100 kHz channel spacing. Participant number 5 would then use 868 + 0.1*5 = 868.5 MHz.
]]

Background
----------------
* Basic TI-RTOS and CCS knowledge.
* Attended or read through the CC13xx Proprietary Mode Deep-Dive documentation and/or presentation

Software
---------
The following software need to be installed prior to this training:

* [Code Composer Studio](http://www.ti.com/tool/ccstudio) 7.2 or higher **with latest updates**<br>
  Make sure that CCS is using the latest updates: *Help* &rarr; *Check for Updates*
* [CC13x0 MCU SDK](http://www.ti.com/tool/simplelink-cc13x0-sdk) 1.40 or later
* [SmartRF&trade; Studio](http://www.ti.com/tool/smartrftm-studio) 2.6.0 or later.
* [Sensor Controller Studio](http://www.ti.com/tool/sensor-controller-studio).

Hardware
---------
*  2 x CC1310 or CC1350 LaunchPads.
*  2 x USB Cables.
*  1 x 430BOOST-SHARP96 LCD panel.<br>
   If you don't have an LCD: the rfWsnConcentrator provides output on the UART as well.


EasyLink API
==================================
The RF core has a dedicated driver called the TI-RTOS RF driver. This is used for all interaction with the RF core.
The EasyLink API is a simple abstraction layer on top of the RF Driver and is intended as a starting point for customers creating a proprietary Sub1-GHz protocol or application.

For instructions on using the CC13x0 MCU SDK examples refer to `C:\ti\simplelink_cc13x0_sdk_<version>\docs\proprietary-rf\Proprietary-RF-Users-Guide.html`.

The EasyLink Example can be found in the resource explorer under  **Software** &rarr; **Simplelink cc13x0 SDK** &rarr; **Examples** &rarr; **Development Tools** &rarr; **CC1310 Launchpad** &rarr; **EasyLink**:

* RF EasyLink Tx
* RF EasyLink Rx
* RF EasyLink Network Processor
* RF Wireless Sensor Network Concentrator
* RF Wireless Sensor Network Concentrator (Over the Air Download)
* RF Wireless Sensor Network Node
* RF Wireless Sensor Network Node (Over the Air Download)

The EasyLink API is documented and maintained on this [wiki](http://processors.wiki.ti.com/index.php/SimpleLink-EasyLink).

[[y Note
The EasyLink layer does not support any regional RF conformance such as Listen Before Talk required for the license free frequency band.
Customers need to add support for the regional conformance that their product requires under the EasyLink API.
]]

Generic API function   | Description
-----------------------|----------------------------------------------------
EasyLink_init()       | Inits and opens the RF driver
EasyLink_transmit()   | Blocking transmit
EasyLink_transmitAsync()| Nonblocking transmit
EasyLink_receive() | Blocking receive
EasyLink_receiveAsync()| Non-blocking receive
EasyLink_abort() | Aborts a non-blocking call
EasyLink_GetIeeeAddr() | Gets the IEEE address
EasyLink_EnableRxAddrFilter() | Enables/disables RX filtering on the address
EasyLink_SetFreq() | Sets the frequency
EasyLink_GetFreq() | Gets the frequency
EasyLink_SetRfPwr() | Sets the TX power
EasyLink_GetRfPwr() | Gets the TX power
EasyLink_getAbsTime() | Gets the absolute radio time
EasyLink_setCtrl() | Sets advanced configuration options
EasyLink_getCtrl() | Gets advanced configuration options

Task 1: Importing the WSN Examples
==================================
In this task we will use Code Composer Studio (CCS) to import the WSN Concentrator example.

    [[b Using IAR Embedded Workbench to import Examples
    It is also possible to use IAR EW to import all CC13x0 MCU SDK examples. In order to do so follow the IAR section of the quick start guide in the SDK, located here:
    * `C:\ti\simplelink_cc13x0_sdk_<version>\docs\proprietary-rf\Proprietary-RF-Quick-Start-Guide.html`.
    ]]

Importing and Building the RF Wireless Sensor Network Concentrator Example
--------------------------------------------------------------------------
1.  Click on the drop down menu **View** &rarr; **Resource Explorer**

    [[b Note
    Do not open Resource Explorer Classic (if it is an available option), in this task we will be working with the new Resource Explorer.
    ]]

2.  Expand the elements: **Software** &rarr; **SimpleLink cc13x0 SDK** &rarr; **Examples** &rarr; **Development Tools** &rarr; **CC1310 Launchpad** &rarr; **EasyLink** &rarr; **rfWsnConcentrator** &rarr; **TI-RTOS** &rarr; **CCS Compiler**

3.  Select **rfWsnConcentrator**.

4.  Your view should now be:
    ![Resource Explorer](resources/resource_explorer_wsn_conc.png)

5.  Click on the import icon in top right corner (shown in red box above).

6.  There should now be a new project in the Project Explorer called **rfWsnConcentrator_CC1310_LAUNCHXL_tirtos_ccs**:
    ![Resource Explorer](resources/css_new_project_explorer.png)

    [[b Note
    The TIRTOS kernel is now included in a seperate project imported with the example project. It can bee seen above in the **tirtos_builds_CC1310_LAUNCHXL_release_ccs** project. The TIRTOS kernel project is specific to the Board type and compiler and shared by all examples for that Board type / compiler.
    ]]

9. Build and download the example by clicking "Debug" (shortcut F11):

    ![Resource Explorer](resources/css_debug_bar.png)

7. Run the example by clicking on the play button.

10. You should now see "Waiting for node" on the 430BOOST-SHARP96 LCD.

11. Unplug your Concentrator device and continue with the tutorial.

Importing and Building the RF Wireless Sensor Network Node Example
------------------------------------------------------------------
1. Import the rfWsnNode examples as you did in for the rfWsnConcentrator in the previous section.

5. Connect another LaunchPad to your PC via USB.

    [[y Several LaunchPads connected
    In order to be certain you flash the right board, it is suggested that you disconnect the Concentrator board while flashing the Node board.
    ]]

6. Build and download the example by clicking "Debug" (shortcut F11):

    ![Resource Explorer](resources/css_debug_bar.png)

7. Run the example by clicking on the play button.

Task 2 &ndash; Putting it all to work
=====================================
1. Power on your concentrator device

2. Power on your node device(s)

3. You shall now see node data (raw ADC value) being displayed on the concentrator LCD from all nodes once data is updated locally. Press and hold the left side button on the node device (marked BTN-1), the character on the LCD on the concentrator device should change from "0" to "1" under SW column.
![Resource Explorer](resources/launchpad_lcd.png)

4. The ADC is connected to the DIO26 pin on the node device. Cover the left side pins with your finger (see pins marked in blue below) and observe a change in node value on the concentrator device.
![Resource Explorer](resources/launchpad.png)


Task 3: Change RF Channel
================================
The default frequency is 868 MHz. In order to avoid interference form other devices on your joint training session it can be useful to change RF channel. Here is how you do it!

1. Open the file "ConcentratorRadioTask.c" in your CCS editor.

2. Use the EasyLink_setFrequency API to change the frequency.
    ```c
    EasyLink_setFrequency(868000000);
    ``` **EasyLink_setFrequency** used to select RF channel/frequency.

3. Build and download, make sure to make the changes on both your concentrator and node devices.

Task 4: Switch from 2-GFSK 50 kbps to Long Range Mode (LRM)
===========================================================
Since the EasyLink layer supports different PHY settings it is straight forward to change the WSN example to use LRM instead.

1. Open the file "RadioProtocol.h" in your CCS editor.

2. Change the RADIO_EASYLINK_MODULATION to your wanted setting.
    ```c
    #define RADIO_EASYLINK_MODULATION     EasyLink_Phy_Custom
    ``` **RADIO_EASYLINK_MODULATION** used to select RF PHY settings.

    The EasyLink_Phy_Custom is a enum defined in EasyLink.h:
    ```c
        //! \brief Phy Type passed to EasyLink_init()
    typedef enum
    {
        EasyLink_Phy_Custom = 0,           //!< Customer Phy specific settings exported from SmartRF Studio.
        EasyLink_Phy_50kbps2gfsk = 1,      //!< Phy settings for Sub1G 50kbps data rate, IEEE 802.15.4g GFSK.
        EasyLink_Phy_625bpsLrm = 2,        //!< Phy settings for Sub1G 625bps data rate, Long Range Mode.
        EasyLink_Phy_2_4_200kbps2gfsk = 3, //!< Phy settings for 2.4Ghz 200kbps data rate, IEEE 802.15.4g GFSK.
        EasyLink_Phy_5kbpsSlLr = 4,        //!< SimpleLink Long Range (5 kbps)
    } EasyLink_PhyType;
    ``` **EasyLink_PhyType** used to select RF PHY settings.

3. Build and download, be sure to make the changes on both your concentrator and node devices.

Task 5: Measure Power consumption on the node
=============================================
The node is entering the lowest possible power mode between measurements - let's measure its average power consumption.

1. Connect an ampere meter between pin3V3 and pinGND on your node device.
2. Power on the node device.

Task 6: Modify Code Running on the Sensor Controller
============================================================
The WSN node example includes code for the sensor controller, in this task we shall modify the interval for reading the ADC.

1. Make sure [Sensor Controller Studio](http://www.ti.com/tool/sensor-controller-studio) is installed on your system.

2. In your imported WSN node example, open the adc_sample.scp file from within Sensor Controller Studio by selecting "Open an existing project". The file is located in the **sce** folder.

3. Click on the execution code, in to pane to the right.
    ![Resource Explorer](resources/scs_execution_code.png)

4. Modify the last line to:

   fwScheduleTask(2);

   ...to make the next wake schedule every 2 tics.


5. Click on Code Generator in the right pane.

6. Click on the button on the bottom of the page saying "Generate driver source code":
![Resource Explorer](resources/SCE_generate_code.png)

7. Switch back to CCS, rebuild and run.

8. Measure average power consumption to see if is lower. We are now reading the sensor every 2 seconds instead of 1.

Task 7: Add a Dual Mode Sensor Node
============================================================
The CC1350 device is a dual band device that supports both sub-1GHz and Bluetooth Low Energy (BLE). In this task we will add node(s) that, in addition to sending sub-1GHz sensor data, also sends BLE advertisement packets (BLE beacons)!
Those BLE beacons can be picked up by any BLE capable device.

    [[b This step requires additional CC1350LP HW
    ]]

1. Follow the same procedure as in Task 1 to import the CC1350LP rfWsnDmNode example into your CCS workspace. This can be found under **SimpleLink cc13x0 SDK** &rarr; **Examples** &rarr; **Development Tools** &rarr; **CC1350 Launchpad** &rarr; **EasyLink** &rarr; **rfWsnConcentrator** &rarr; **TI-RTOS** &rarr; **CCS Compiler**:

![Resource Explorer](resources/resource_explorer_wsn_dmnode.png)

2. Make the same changes to frequency and phy mode as you did in Task 3 and 4.

3. Follow the same procedure as in Task 1 to build and debug the rfWsnDmNode example on a CC1350LP.

4. Once the rfWsnDmNode examples is running on the CC1350LP you should see it appear on the CC1310LP Concentrator's LCD and UART.

Task 8: Observe the Dual Mode Sub1-GHz and BLE features of the CC1350 device using the TI SmartPhone App
============================================================

1. On a BLE enabled SmartPhone open app store or google play and search for "TI SimpleLink Starter" and install the TI SimpleLink Starter application.

2. Open the TI SimpleLink Starter application, you should see the CC1350 LP appear in the list of devices. Press button BTN-1 on the CC1350LP and observe the "Button Pressed" in the Smart Phone application and on the Sub1Ghz Wsn Concentrators LCD.

3. The TI SmartPhone application uses Manufacturer Specific BLE Advertisements to advertise the device and the state of the button. If you have an LCD Booster Pack fitted you will see that the BLE Advertisement mode is set to "BLE MS + URL". This can also be seen on the UART if you do not have an LCD Booster pack. This means that the CC1350 is advertising both the Manufacturer Specific format and the Eddystone URL format advertisements. The Eddystone URL advertisement beacon is use for the Physical Web. Visit the links below to learn more about the Physical Web:

    https://www.youtube.com/embed/1yaLPRgtlR0

    https://google.github.io/physical-web/

4. Enable your SmartPhone to display the Eddystone URL by following these instructions below. Once completed open the URL advertised by the CC1350 Wsn Node.

    https://support.google.com/chrome/answer/6239299?hl=en

5. Observe the other beacon formats supported. This can be done by pressing button BTN-2 to cycle through the other advertisement formats supported. This can be done by pressing button BTN-2 to cycle through the other advertisement formats supported, the advertisement mode used can be seen on the LCD and UART:

    - URL: This is the Eddystone URL beacon (as discussed previously used for Physical Web) interleaved with Telemetry data.
    - UUID: This is used for Locationing and is also interleaved with Telemetry data.


* There are a number of applications that can be used to display Eddystone beacons. Some do not show the telemetry data, we have tested this with the Estimote Android Application which can be used to display the Telemetry data. The Telemetry Beacon include data for:

    - Temperature
    - Battery level
    - On time
    - Packet Count


    [[b The rfWsnDmConcentrator running on a CC1350LP can also be used to beacon Node data by using BTN-1 to select the Node and BTN-2 to cycle through the Beacon formats. The rfWsnDMConcentrator defaults to not sending beacons.
    ]]

References
==================================

**CC13xx Radio TRM Chapter**: [http://www.ti.com/lit/swcu117](http://www.ti.com/lit/swcu117)

**EasyLink API**: `C:\ti\simplelink_cc13x0_sdk_<version>\docs\proprietary-rf\html\easylink\index.html`

**CC13xx Software Overview** &ndash; Available at: [http://www.ti.com/tool/cc13xx-sw](http://www.ti.com/tool/cc13xx-sw).


<div align="center" style="margin-top: 4em; font-size: smaller;">
<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="../../web_support/cc_license_icon.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</div>

</xmp>

<link rel="stylesheet" href="../../web_support/highlight/styles/zenburn.css"/>
<script src="../../web_support/strapdown/vendor/jquery-1.11.2.min.js"></script>
<script src="../../web_support/strapdown/vendor/bootstrap.min.js"></script>
<script src="../../web_support/highlight/highlight.pack.js"></script>
<script src="../../web_support/strapdown/v/0.2/strapdown.js"></script>

</html>
